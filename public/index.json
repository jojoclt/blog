


[{"content":"","date":"5 July 2025","externalUrl":null,"permalink":"/tags/android/","section":"Tags","summary":"","title":"Android","type":"tags"},{"content":"","date":"5 July 2025","externalUrl":null,"permalink":"/tags/compose/","section":"Tags","summary":"","title":"Compose","type":"tags"},{"content":"\rIntroduction #\rI had the chance to work on an app that required a security test based on OWASP guidelines. Based on the requirement, I was asked to export a list of all the dependencies used in the app in the format name|version|source. Since I was using version.toml with Gradle’s Version Catalog, getting everything into that format wasn’t straightforward. At first, I just used an LLM to help with the formatting—but along the way, I discovered a much simpler approach worth sharing.\nAs the Gradle Version Catalog has been streamlined, managing and sharing dependencies across submodules has become so much easier, but it is now harder to present those dependencies version in a simple manner those data back for the Mobile Application Security Package Analysis.\nBut there is actually an easy way to do that, which can be achieve by a few clicks in Android Studio IDE.\nMethod 1: From Gradle CLI #\rYou can run gradle :app:androidDependencies in Android Studio to get all the compiled dependencies use in the project, this will listed all the dependencies graph under that aar packages with respect to build variants.\nMethod 2: From Android Studio #\rOr it can be get from File \u0026gt; Project Structure \u0026gt; Dependencies\nOn the right hand side we can see the Resolved Dependencies and each build flavors. For example, I will choose devPermRelease\nYou can see all the resolved dependencies here, you can even highlight all the dependencies in that group and use Copy Shortcuts on your Operating System (Right Click doesn\u0026rsquo;t seemed to work here) and then paste it in your favourite text editor.\nExample of copied dependencies Key Takeaways #\rLearned how to export a list of dependencies from Gradle Version Catalog in a text format, useful for security reports and audits. This method also works if you need to export dependencies for a specific build variant or product flavor. ","date":"5 July 2025","externalUrl":null,"permalink":"/posts/mas-report/","section":"Posts","summary":"\u003ch2 class=\"relative group\"\u003eIntroduction \r\n    \u003cdiv id=\"introduction\" class=\"anchor\"\u003e\u003c/div\u003e\r\n    \r\n    \u003cspan\r\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\r\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline\" href=\"#introduction\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\r\n    \u003c/span\u003e        \r\n    \r\n\u003c/h2\u003e\r\n\u003cp\u003eI had the chance to work on an app that required a security test based on OWASP guidelines. Based on the requirement, I was asked to export a list of all the dependencies used in the app in the format \u003ccode\u003ename|version|source\u003c/code\u003e. Since I was using version.toml with Gradle’s Version Catalog, getting everything into that format wasn’t straightforward. At first, I just used an LLM to help with the formatting—but along the way, I discovered a much simpler approach worth sharing.\u003c/p\u003e","title":"Extract Gradle Dependencies for Mobile App Security (MAS)","type":"posts"},{"content":"","date":"5 July 2025","externalUrl":null,"permalink":"/tags/gradle/","section":"Tags","summary":"","title":"Gradle","type":"tags"},{"content":"","date":"5 July 2025","externalUrl":null,"permalink":"/","section":"Jojonosaurus","summary":"","title":"Jojonosaurus","type":"page"},{"content":"","date":"5 July 2025","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","date":"5 July 2025","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"4 June 2025","externalUrl":null,"permalink":"/categories/blog/","section":"Categories","summary":"","title":"Blog","type":"categories"},{"content":"","date":"4 June 2025","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","date":"4 June 2025","externalUrl":null,"permalink":"/tags/performance/","section":"Tags","summary":"","title":"Performance","type":"tags"},{"content":"","date":"4 June 2025","externalUrl":null,"permalink":"/categories/post/","section":"Categories","summary":"","title":"Post","type":"categories"},{"content":"","date":"4 June 2025","externalUrl":null,"permalink":"/tags/recomposition/","section":"Tags","summary":"","title":"Recomposition","type":"tags"},{"content":"","date":"4 June 2025","externalUrl":null,"permalink":"/posts/post-lite-one/","section":"Posts","summary":"Despite the official documentation says the syntax are equivalent, but it is not, here\u0026rsquo;s why.","title":"Why Destructuring is Dangerous in Compose","type":"posts"},{"content":"","date":"21 May 2025","externalUrl":null,"permalink":"/categories/android-development/","section":"Categories","summary":"","title":"Android Development","type":"categories"},{"content":"","date":"21 May 2025","externalUrl":null,"permalink":"/series/deep-link-compose-fcm/","section":"Series","summary":"","title":"Deep-Link-Compose-Fcm","type":"series"},{"content":"","date":"21 May 2025","externalUrl":null,"permalink":"/tags/deep-links/","section":"Tags","summary":"","title":"Deep-Links","type":"tags"},{"content":"","date":"21 May 2025","externalUrl":null,"permalink":"/tags/fcm/","section":"Tags","summary":"","title":"Fcm","type":"tags"},{"content":"","date":"21 May 2025","externalUrl":null,"permalink":"/tags/navigation/","section":"Tags","summary":"","title":"Navigation","type":"tags"},{"content":"","date":"21 May 2025","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":"\rWhat You\u0026rsquo;ll Learn #\rSetting up type-safe navigation with Kotlin Serialization Creating serializable route classes Navigation between screens Benefits over string-based navigation Topics #\r@Serializable data classes for routes NavHost setup with type-safe routes Navigation with arguments Best practices and gotchas Library Requirement #\rNavigation Compose version \u0026gt;= 2.8.0 and version \u0026lt; 3.0.0 (Updated June 2025, Google have released a new Navigation3 Library for Jetpack Compose which is now in alpha with better backstack handling and some breaking changes.) KotlinX.Serialization ","date":"21 May 2025","externalUrl":null,"permalink":"/posts/type-safe-navigation-compose/","section":"Posts","summary":"\u003ch2 class=\"relative group\"\u003eWhat You\u0026rsquo;ll Learn \r\n    \u003cdiv id=\"what-youll-learn\" class=\"anchor\"\u003e\u003c/div\u003e\r\n    \r\n    \u003cspan\r\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\r\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline\" href=\"#what-youll-learn\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\r\n    \u003c/span\u003e        \r\n    \r\n\u003c/h2\u003e\r\n\u003cul\u003e\n\u003cli\u003eSetting up type-safe navigation with Kotlin Serialization\u003c/li\u003e\n\u003cli\u003eCreating serializable route classes\u003c/li\u003e\n\u003cli\u003eNavigation between screens\u003c/li\u003e\n\u003cli\u003eBenefits over string-based navigation\u003c/li\u003e\n\u003c/ul\u003e\n\r\n\u003ch2 class=\"relative group\"\u003eTopics \r\n    \u003cdiv id=\"topics\" class=\"anchor\"\u003e\u003c/div\u003e\r\n    \r\n    \u003cspan\r\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\r\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline\" href=\"#topics\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\r\n    \u003c/span\u003e        \r\n    \r\n\u003c/h2\u003e\r\n\u003cul\u003e\n\u003cli\u003e@Serializable data classes for routes\u003c/li\u003e\n\u003cli\u003eNavHost setup with type-safe routes\u003c/li\u003e\n\u003cli\u003eNavigation with arguments\u003c/li\u003e\n\u003cli\u003eBest practices and gotchas\u003c/li\u003e\n\u003cli\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\r\n\u003ch2 class=\"relative group\"\u003eLibrary Requirement \r\n    \u003cdiv id=\"library-requirement\" class=\"anchor\"\u003e\u003c/div\u003e\r\n    \r\n    \u003cspan\r\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\r\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline\" href=\"#library-requirement\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\r\n    \u003c/span\u003e        \r\n    \r\n\u003c/h2\u003e\r\n\u003cul\u003e\n\u003cli\u003eNavigation Compose version \u0026gt;= 2.8.0 and version \u0026lt; 3.0.0 (Updated June 2025, Google have released a new Navigation3 Library for Jetpack Compose which is now in alpha with better backstack handling and some breaking changes.)\u003c/li\u003e\n\u003cli\u003eKotlinX.Serialization\u003c/li\u003e\n\u003c/ul\u003e","title":"Type-Safe Navigation in Jetpack Compose","type":"posts"},{"content":" This Post is being built #\rBy using deep links, you can jump from the notifications to a certain routes in NavGraph or even Nested Graph\nPrerequisites #\rKotlinX.Serialization Navigation Compose Navigating Deep Links with Intents Url Parameters #\rUsing Something #\rThe following DetailPage class is used as an example for the navigation\n@Serializable data class DetailPage( @SerialName(\u0026#34;title_name\u0026#34;) val title: String, @SerialName(\u0026#34;sub_title\u0026#34;) val subTitle: String? = null val id: Int, ) If you want the navDeepLink to parse your URI, you should put it in this format\nappName://DetailPage/{title_name}/{id}?sub_title={sub_title}\nIn the compose navigation the code will look like\ncomposable\u0026lt;DetailPage\u0026gt;( deepLinks = listOf\u0026lt;DetailPage\u0026gt;( basePath = \u0026#34;appName://DetailPage\u0026#34;, ) ) What if the Uri is in different format? #\rFor example, you want to extract the id and name pattern from the uri or using custom uri altogether. together, you might want to write a custom uriPattern in the NavDeepLink.navDeepLink API\nIt can be put together as\ncomposable\u0026lt;DetailPage\u0026gt;( deepLinks = listOf\u0026lt;DetailPage\u0026gt;( basePath = \u0026#34;appName://DetailPage\u0026#34;, ) { uriPattern = \u0026#34;appName://{id}_{title_name}?sub_title={sub_title}\u0026#34; } ) { val args = it.toRoute\u0026lt;DetailPage\u0026gt; } Then args can be retrieve using\n1 2 3 4 5 6 7 8 Or even create something difficult to build like composable\u0026lt;DetailPage\u0026gt;( deepLinks = listOf\u0026lt;DetailPage\u0026gt;( basePath = \u0026#34;appName://DetailPage\u0026#34;, ) { uriPattern = \u0026#34;example://full_name/{first_name}/{last_name}/edit\u0026#34; } ) [!NOTE] This uriPattern might not be type safe, but it offers flexibility for those in need\n","date":"21 December 2024","externalUrl":null,"permalink":"/posts/deep-link-fcm/","section":"Posts","summary":"\u003cblockquote\u003e\n\u003ch2 class=\"relative group\"\u003eThis Post is being built \r\n    \u003cdiv id=\"this-post-is-being-built\" class=\"anchor\"\u003e\u003c/div\u003e\r\n    \r\n    \u003cspan\r\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\r\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline\" href=\"#this-post-is-being-built\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\r\n    \u003c/span\u003e        \r\n    \r\n\u003c/h2\u003e\u003c/blockquote\u003e\n\u003cp\u003eBy using deep links, you can jump from the notifications to a certain routes in NavGraph or even Nested Graph\u003c/p\u003e","title":"🚧Integrating Deep Links with Type-Safe Navigation Compose (and custom parsing) and fcm","type":"posts"},{"content":"\rIntroduction #\rHello Navigation Scaffold, NavHost Nested Graph\n","date":"2 November 2024","externalUrl":null,"permalink":"/posts/bottom-nav-shared-transition/","section":"Posts","summary":"\u003ch2 class=\"relative group\"\u003eIntroduction \r\n    \u003cdiv id=\"introduction\" class=\"anchor\"\u003e\u003c/div\u003e\r\n    \r\n    \u003cspan\r\n        class=\"absolute top-0 w-6 transition-opacity opacity-0 ltr:-left-6 rtl:-right-6 not-prose group-hover:opacity-100\"\u003e\r\n        \u003ca class=\"group-hover:text-primary-300 dark:group-hover:text-neutral-700 !no-underline\" href=\"#introduction\" aria-label=\"Anchor\"\u003e#\u003c/a\u003e\r\n    \u003c/span\u003e        \r\n    \r\n\u003c/h2\u003e\r\n\u003cp\u003eHello Navigation\nScaffold, NavHost\nNested Graph\u003c/p\u003e","title":"One to One vs. One to Many: Navigating Scaffold Strategies in Jetpack Compose","type":"posts"},{"content":"","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"}]